{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/components/Card.svelte","../../node_modules/svelte/store/index.mjs","../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/native.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/models.js","../../src/stores.js","../../src/components/BotPanel.svelte","../../src/components/Button.svelte","../../src/components/DollarPanel.svelte","../../src/components/SymbolList.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.43.2' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<div class=\"card\">\n  <slot></slot>\n</div>\n\n<style>\n  .card {\n    background-color: #fff;\n    color: #333;\n    border-radius: 15px;\n    padding: 40px 50px;\n    margin: 20px 0;\n    position: relative;\n  }\n</style>","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { v4 } from \"uuid\";\nexport class AppState {\n  dollar_model;\n  currency_model;\n  bot_model;\n\n  constructor(dollar_model, currency_model, bot_model) {\n    this.dollar_model = dollar_model;\n    this.currency_model = currency_model;\n    this.bot_model = bot_model;\n  }\n}\n\nexport class CurrencyRate {\n  uid;\n  currencyCode;\n  alias_name;\n  rate;\n  has_manual_rate;\n  manual_rate;\n  adjustment;\n\n  constructor(\n    currencyCode,\n    alias_name,\n    rate,\n    has_manual_rate,\n    manual_rate,\n    adjustment\n  ) {\n    this.uid = v4();\n    this.currencyCode = currencyCode;\n    this.alias_name = alias_name;\n    this.rate = rate;\n    this.has_manual_rate = has_manual_rate;\n    this.manual_rate = manual_rate;\n    this.adjustment = adjustment;\n  }\n}\n\nexport class CurrencyModel {\n  selected_currencies;\n  currency_rates;\n\n    constructor(selected_currencies =[], currency_rates =[]) {\n        this.selected_currencies = selected_currencies\n        this.currency_rates = currency_rates\n    }\n}\n\nexport class DollarPrice {\n  price;\n  timestamp;\n\n  constructor(price, timestamp) {\n    this.uid = v4();\n    this.price = price;\n    this.timestamp = timestamp;\n  }\n}\n\nexport class DollarModel {\n    current_price;\n    historic_prices;\n\n    constructor(current_price= new DollarPrice(40000, 1679647122),\n        historic_prices=[]) {\n        this.current_price = current_price\n        this.historic_prices = historic_prices\n    }\n}\n\nexport class BotInterval {\n  unit;\n  value;\n\n  constructor(unit, value) {\n    this.unit = unit;\n    this.value = value;\n  }\n}\n\nexport class BotModel {\n    disabled;\n    onTime;\n    onChange;\n    interval;\n\n    constructor(disabled=false, onTime=false, onChange=true,\n        interval= new BotInterval('Min', 2)) {\n        this.disabled = disabled\n        this.onTime = onTime\n        this.onChange = onChange\n        this.interval = interval\n    }\n}\n","import { writable } from \"svelte/store\";\nimport { v4 } from \"uuid\";\nimport {\n  AppState,\n  CurrencyRate,\n  CurrencyModel,\n  DollarPrice,\n  DollarModel,\n  BotInterval,\n  BotModel,\n} from \"./models\";\n\nlet app_server_address = \"http://localhost:7777\";\n\nexport const CurrencyStore = writable(new CurrencyModel());\n\nexport const DollarStore = writable(new DollarModel());\n\nexport const BotStore = writable(new BotModel());\n\nlet app_state = new AppState(null, null, null);\n\nexport async function getRawStateFromServer() {\n  let raw_res = await fetch(\n    `${app_server_address}/api/get_state`\n    // {mode: 'no-cors'}\n  );\n\n  if (!raw_res.ok) {\n    console.log(raw_res.statusText);\n    console.log(raw_res.status);\n  }\n  return await raw_res.json();\n}\n\nfunction dollarModelDataAdapter(dollar_model) {\n  let rec_historic_prices = [];\n\n  for (let historic_price of dollar_model.historic_prices) {\n    rec_historic_prices = [\n      new DollarPrice(historic_price.price, historic_price.timestamp),\n      ...rec_historic_prices,\n    ];\n  }\n\n  rec_historic_prices.sort((a, b) => b.timestamp - a.timestamp);\n\n  let new_dollar_model = new DollarModel(\n    new DollarPrice(\n      dollar_model.current_price.price,\n      dollar_model.current_price.timestamp\n    ),\n    rec_historic_prices\n  );\n\n  return new_dollar_model;\n}\n\nfunction botModelDataAdapter(bot_model) {\n  let interval = new BotInterval(\n    bot_model.interval.unit,\n    bot_model.interval.value\n  );\n\n  let new_bot_model = new BotModel(\n    bot_model.disabled,\n    bot_model.onTime,\n    bot_model.onChange,\n    interval\n  );\n\n  return new_bot_model;\n}\n\nfunction currencyModelDataAdapter(currency_model) {\n  let received_currency_rates = [];\n\n  for (let raw_model of currency_model.currency_rates) {\n    let new_currency = new CurrencyRate(\n      raw_model.currencyCode,\n      raw_model.alias_name,\n      raw_model.rate,\n      raw_model.has_manual_rate,\n      raw_model.manual_rate,\n      raw_model.adjustment\n    );\n    received_currency_rates = [new_currency, ...received_currency_rates];\n  }\n\n  received_currency_rates = [\n    ...received_currency_rates.sort((a, b) =>\n      a.currencyCode.localeCompare(b.currencyCode)\n    ),\n  ];\n  let new_currency_model = new CurrencyModel(\n    currency_model.selected_currencies,\n    received_currency_rates\n  );\n  return new_currency_model;\n}\n\nasync function _getAppStateFromServer() {\n  console.log(\"Getting app state from server\");\n  let raw_state = await getRawStateFromServer();\n\n  let new_dollar_model = dollarModelDataAdapter(raw_state.dollar_model);\n  let new_bot_model = botModelDataAdapter(raw_state.bot_model);\n  let new_currency_model = currencyModelDataAdapter(raw_state.currency_model);\n\n  let app_state = new AppState(\n    new_dollar_model,\n    new_currency_model,\n    new_bot_model\n  );\n\n  console.log(app_state);\n\n  return app_state;\n}\n\nexport async function reloadRatesFromServer() {\n  console.log(\"Reloading rates from server\");\n\n  let newAppState = await _getAppStateFromServer();\n  let new_currency_rates = newAppState.currency_model.currency_rates;\n\n  CurrencyStore.update((currentState) => {\n    let toBeUpdatedState = JSON.parse(JSON.stringify(currentState));\n    for (let currency_rate of currentState.currency_rates) {\n      if (\n        new_currency_rates\n          .map((e) => e.currencyCode)\n          .includes(currency_rate.currencyCode)\n      ) {\n        let corrospondingRate = new_currency_rates.filter(\n          (e) => e.currencyCode == currency_rate.currencyCode\n        )[0];\n        toBeUpdatedState.currency_rates.find(\n          (e) => e.currencyCode == corrospondingRate.currencyCode\n        ).rate = corrospondingRate.rate;\n      }\n    }\n    return toBeUpdatedState;\n  });\n}\n\nexport async function reloadStateFromServer() {\n  let new_app_state = await _getAppStateFromServer();\n  console.log(new_app_state);\n\n  DollarStore.update((currentState) => {\n    return new_app_state.dollar_model;\n  });\n\n  BotStore.update((currentState) => {\n    return new_app_state.bot_model;\n  });\n\n  CurrencyStore.update((currentState) => {\n    return new_app_state.currency_model;\n  });\n}\n\nlet dollarUnsub;\nlet currencyUnsub;\nlet botUnsub;\n\nexport function startUpdatingAppState() {\n  dollarUnsub = DollarStore.subscribe((dollar_model) => {\n    app_state.dollar_model = dollar_model;\n  });\n  currencyUnsub = CurrencyStore.subscribe((currency_model) => {\n    app_state.currency_model = {\n      selected_currencies: currency_model.selected_currencies,\n      currency_rates: [...currency_model.currency_rates],\n    };\n  });\n  botUnsub = BotStore.subscribe((bot_model) => {\n    app_state.bot_model = bot_model;\n  });\n\n}\n\nexport function stopUpdatingAppState() {\n    dollarUnsub()\n    currencyUnsub()\n    botUnsub()\n}\n\nexport async function sendStateToServer() {\n  console.log(\"Sending state to server\");\n  let app_state_json = JSON.stringify(app_state);\n  let raw_res = await fetch(`${app_server_address}/api/send_state`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: app_state_json,\n  });\n}\n","<script>\n  import Card from \"./Card.svelte\";\n  import { BotStore, sendStateToServer } from \"../stores\";\n  import {onMount} from \"svelte\";\n\n  const onTriggerChange = async (e) => {\n    let selected = +e.currentTarget.value;\n    BotStore.update((currentState) => {\n      let new_state = JSON.parse(JSON.stringify(currentState));\n\n      if (selected === 1) {\n        new_state.onTime = true;\n        new_state.onChange = false;\n      } else {\n        new_state.onTime = false;\n        new_state.onChange = true;\n      }\n\n      return new_state;\n    });\n    await sendStateToServer();\n  };\n\n    const onIntervalChangeHandler = async () => {\n        await sendStateToServer();\n    }\n\n  const onBotDisableButtonClicked = async () => {\n    $BotStore.disabled = !$BotStore.disabled;\n      await sendStateToServer();\n  };\n\n    onMount(async () => {\n        console.log(\"MOUNTED BOT PANEL\")\n        console.log($BotStore.onTime)\n        console.log($BotStore.onChange)\n    })\n\n</script>\n\n<Card>\n  <div style=\"display: flex;\">\n    <p>Status:</p>\n    <p>{$BotStore.disabled ? \"Disabled\" : \"Running\"}</p>\n  </div>\n  {#if !$BotStore.disabled}\n    <ul class=\"rating\">\n      <li>\n        <input\n          type=\"radio\"\n          id=\"by-time\"\n          name=\"by-time\"\n          value=\"1\"\n          on:change={onTriggerChange}\n          checked={$BotStore.onTime}\n        />\n        <label for=\"num1\">Send On Time</label>\n      </li>\n      <li>\n        <input\n          type=\"radio\"\n          id=\"by-change\"\n          name=\"by-change\"\n          value=\"2\"\n          on:change={onTriggerChange}\n          checked={$BotStore.onChange}\n        />\n        <label for=\"num2\">Send On Change</label>\n      </li>\n    </ul>\n    {#if $BotStore.onTime}\n      <div style=\"display: flex;\">\n        <p>Every</p>\n        <input\n          type=\"number\"\n          min=\"0\"\n          step=\"1\"\n          on:change={onIntervalChangeHandler}\n          bind:value={$BotStore.interval.value}\n        />\n        <select\n          bind:value={$BotStore.interval.unit}\n          on:change={onIntervalChangeHandler}\n          name=\"interval-unit\"\n          id=\"interval-unit\"\n        >\n          <option value=\"Min\">Minutes</option>\n          <option value=\"Hour\">Hours</option>\n          <option value=\"Day\">Days</option>\n        </select>\n      </div>\n    {/if}\n  {/if}\n  <div style=\"display: flex\">\n    <button on:click={onBotDisableButtonClicked}>\n      {$BotStore.disabled ? \"Enable\" : \"Disable\"}\n    </button>\n  </div>\n</Card>\n\n<style>\n  * {\n    font-size: 16px;\n    margin-right: 8px;\n    margin-top: 4px;\n    margin-bottom: 4px;\n  }\n  .rating {\n    display: flex;\n    align-items: center;\n    justify-content: left;\n  }\n\n  button {\n    color: #fff;\n    border: 0;\n    border-radius: 8px;\n    color: #fff;\n    height: 32px;\n    width: 120px;\n    cursor: pointer;\n    background-color: #202142;\n  }\n\n  button:hover {\n    transform: scale(0.98);\n    opacity: 0.9;\n  }\n\n  button:disabled {\n    background-color: #cccccc;\n    color: #333;\n    cursor: auto;\n  }\n\n  button:disabled:hover {\n    transform: scale(1);\n    opacity: 1;\n  }\n</style>\n","<script>\n  export let style = 'primary'\n  export let type = 'button'\n  export let disabled = false\n</script>\n\n<button {type} {disabled} class={style}>\n  <slot></slot>\n</button>\n\n\n<style>\n  button {\n    color: #fff;\n    border: 0;\n    border-radius: 8px;\n    color: #fff;\n    width: 60px;\n    cursor: pointer;\n  }\n\n  .primary {\n    background-color: #202142;\n  }\n\n  .secondary {\n    background: #ff6a95;\n  }\n\n  button:hover {\n    transform: scale(0.98);\n    opacity: 0.9;\n  }\n\n  button:disabled{\n    background-color: #cccccc;\n    color: #333;\n    cursor:auto;\n  }\n\n  button:disabled:hover{\n    transform:scale(1);\n    opacity: 1;\n  }\n\n</style>\n","<script>\n  import { DollarStore, sendStateToServer } from \"../stores.js\";\n  import { DollarPrice } from \"../models.js\";\n  import Button from \"./Button.svelte\";\n  import Card from \"./Card.svelte\";\n\n  let manual_rate = \"\";\n\n  let user_selected_timedate;\n\n  const handleSubmitNewDollarPrice = async (new_price) => {\n    console.log(new_price);\n\n    DollarStore.update((currentState) => {\n      let new_historic_price = new DollarPrice(\n        +currentState.current_price.price,\n        currentState.current_price.timestamp\n      );\n      let new_historic_prices = [\n        new_historic_price,\n        ...currentState.historic_prices,\n      ];\n\n      console.log(user_selected_timedate);\n\n      let new_dollar_price = new DollarPrice(\n        new_price,\n        user_selected_timedate instanceof String\n          ? Math.floor(Date.parse(user_selected_timedate) / 1000)\n          : Math.floor(new Date() / 1000)\n      );\n\n      let new_state = {\n        current_price: new_dollar_price,\n        historic_prices: new_historic_prices,\n      };\n\n      return new_state;\n    });\n\n      await sendStateToServer()\n  };\n\n  const convertTimestampToDate = (timestamp) => {\n    let pointInTime = new Date(timestamp * 1000);\n    return pointInTime.toLocaleDateString();\n  };\n\n  const convertTimestampToTime = (timestamp) => {\n    let pointInTime = new Date(timestamp * 1000).toLocaleTimeString();\n\n    return pointInTime;\n  };\n</script>\n\n<Card>\n  <form on:submit|preventDefault={handleSubmitNewDollarPrice(manual_rate)}>\n    <div style=\"display: flex;\">\n      <p>Enter</p>\n      <input type=\"number\" min=\"0\" bind:value={manual_rate} />\n      <p>$</p>\n      <input type=\"datetime-local\" bind:value={user_selected_timedate} />\n      <Button type=\"submit\">Add</Button>\n    </div>\n  </form>\n\n  <hr class=\"solid\" />\n\n  <div style=\"display: flex; justify-content: space-between;\">\n    <p>\n      Current Price:\n      {$DollarStore.current_price.price}\n    </p>\n    <p>\n      {convertTimestampToDate($DollarStore.current_price.timestamp)} -\n      {convertTimestampToTime($DollarStore.current_price.timestamp)}\n    </p>\n  </div>\n\n  <hr class=\"solid\" />\n\n  <p>Logs:</p>\n  {#each $DollarStore.historic_prices as dollar (dollar.uid)}\n    <div style=\"display: flex; justify-content: space-between; \">\n      <p>{dollar.price}</p>\n      <p>\n        {convertTimestampToDate(dollar.timestamp)} -\n        {convertTimestampToTime(dollar.timestamp)}\n      </p>\n    </div>\n  {/each}\n</Card>\n\n<style>\n  * {\n    font-size: 16px;\n    margin-right: 8px;\n    margin-top: 4px;\n    margin-bottom: 4px;\n  }\n\n  input[type=\"number\"] {\n    width: 120px;\n    border-width: 1px;\n    border-radius: 4px;\n    text-align: center;\n    padding: 2px 4px;\n    /* flex-grow: 2; */\n    /* border: none; */\n    font-size: 16px;\n    text-align: start;\n  }\n\n  input:focus {\n    outline: none;\n  }\n\n  hr.solid {\n    border-top: 1px solid #bbb;\n    margin: 8px 0px;\n  }\n</style>\n","<script>\n  import { CurrencyStore, sendStateToServer } from \"../stores\";\n  import { CurrencyRate } from \"../models\";\n  import Card from \"./Card.svelte\";\n  import { onMount } from \"svelte\";\n  $: selectedCurrency = \"\";\n\n  let updated_current_currencies;\n\n  $: addingNewCurrency = true;\n\n  $: newOrEditCurrency = {\n    currencyCode: \"\",\n    alias_name: \"\",\n    rate: 1,\n    has_manual_rate: true,\n    manual_rate: 1,\n    adjustment: 0,\n  };\n\n  const updateAddingNewCurrency = (currencyCode) => {\n    let current_currencies_codes = updated_current_currencies.map(\n      (v) => v.currencyCode\n    );\n    if (current_currencies_codes.includes(currencyCode)) {\n      addingNewCurrency = false;\n    } else {\n      addingNewCurrency = true;\n    }\n  };\n\n  const onNewFieldChangeHandler = (event) => {\n    updateAddingNewCurrency(newOrEditCurrency.currencyCode);\n  };\n\n  const handleDeleteCurrency = async () => {\n    console.log(`Deleting ${newOrEditCurrency}`);\n    CurrencyStore.update((currentState) => {\n      let newState = currentState;\n\n      let newCurrencyRates = newState.currency_rates.filter(\n        (currency_rate) =>\n          currency_rate.currencyCode != newOrEditCurrency.currencyCode\n      );\n\n      newCurrencyRates = newCurrencyRates.filter((item) => item);\n\n      newState.currency_rates = [...newCurrencyRates];\n\n      resetNewOrEditCurrency();\n      return newState;\n    });\n    await sendStateToServer();\n  };\n\n  const handleAddOrEditCurrency = async () => {\n    console.log(`Adding or Editing ${newOrEditCurrency}`);\n    CurrencyStore.update((currentState) => {\n      let newState = currentState;\n\n      if (\n        currentState.currency_rates\n          .map((v) => v.currencyCode)\n          .includes(newOrEditCurrency.currencyCode)\n      ) {\n        console.log(\"Editing\");\n        let current_currency_rates = [...newState.currency_rates];\n        let index = current_currency_rates.findIndex(\n          (v) => v.currencyCode == newOrEditCurrency.currencyCode\n        );\n        current_currency_rates[index].alias_name = newOrEditCurrency.alias_name;\n        newState.currency_rates = [...current_currency_rates];\n      } else {\n        console.log(\"Adding\");\n        newState.currency_rates = [\n          new CurrencyRate(\n            newOrEditCurrency.currencyCode,\n            newOrEditCurrency.alias_name,\n            newOrEditCurrency.rate,\n            newOrEditCurrency.has_manual_rate,\n            newOrEditCurrency.manual_rate,\n            newOrEditCurrency.adjustment\n          ),\n\n          ...newState.currency_rates,\n        ];\n\n        newState.selected_currencies = [\n          newOrEditCurrency.currencyCode,\n          ...newState.selected_currencies,\n        ];\n      }\n\n      resetNewOrEditCurrency();\n\n      return newState;\n    });\n\n    await sendStateToServer();\n  };\n\n  const handleChangingAdjustment = async () => {\n    console.log(\"Handing adjustment\");\n    await sendStateToServer();\n  };\n\n  const resetNewOrEditCurrency = () => {\n    newOrEditCurrency = {\n      currencyCode: \"\",\n      alias_name: \"\",\n      rate: 1,\n      has_manual_rate: true,\n      manual_rate: 1,\n      adjustment: 0,\n    };\n    addingNewCurrency = true;\n  };\n\n  /* const handleInput = (symbol) => { */\n  /*   console.log(symbol); */\n  /* }; */\n  /* const handleCurrencyRateChange = (currencyRateElement) => { */\n  /*   console.log(currencyRateElement); */\n  /* }; */\n\n  const handleSelectCurrency = async (selectedCurrencyName) => {\n    if (selectedCurrencyName.length > 0) {\n      console.log(`Selecting ${selectedCurrencyName}`);\n      CurrencyStore.update((currentState) => {\n        let newState = currentState;\n\n        newState.selected_currencies = [\n          selectedCurrencyName,\n          ...newState.selected_currencies,\n        ];\n\n        newState.selected_currencies.sort();\n\n        return newState;\n      });\n\n      await sendStateToServer();\n      await sendStateToServer();\n\n      selectedCurrency = \"\";\n    }\n  };\n\n  const handleResetCurrencies = async () => {\n    CurrencyStore.update((currentState) => {\n      let newState = currentState;\n\n      newState.selected_currencies = [];\n\n      return newState;\n    });\n\n    await sendStateToServer();\n  };\n\n  $: selectedCurrencies = [];\n\n  const updateSelectedCurrencies = (currency_model) => {\n    let m_SelectedCurrencies = [];\n    for (let selectedCurrency of currency_model.selected_currencies) {\n      let possibleSelected = currency_model.currency_rates.filter(\n        (v) => v.currencyCode === selectedCurrency\n      )[0];\n      if (possibleSelected) {\n        m_SelectedCurrencies.push(possibleSelected);\n      }\n    }\n    console.log(\"Updating selected currencies\");\n    selectedCurrencies = m_SelectedCurrencies;\n  };\n\n  onMount(() => {\n    CurrencyStore.subscribe((currency_model) => {\n      updated_current_currencies = currency_model.currency_rates;\n      updateSelectedCurrencies(currency_model);\n    });\n  });\n</script>\n\n<Card>\n  <div style=\"display: flex; margin-bottom: 16px;\">\n    <p style=\"margin-right: 16px;\">New / Edit Currency</p>\n    <input\n      on:change={(e) => {\n        onNewFieldChangeHandler(e);\n      }}\n      style=\"width: 56px; margin-right: 16px;\"\n      type=\"text\"\n      bind:value={newOrEditCurrency.currencyCode}\n    />\n    <input\n      style=\"width: 96px; margin-right: 16px;\"\n      on:chage={() => {}}\n      type=\"text\"\n      bind:value={newOrEditCurrency.alias_name}\n    />\n    <button\n      on:click={() => {\n        handleAddOrEditCurrency();\n      }}>{addingNewCurrency ? \"Add\" : \"Edit\"}</button\n    >\n    {#if !addingNewCurrency}\n      <button\n        on:click={() => {\n          handleDeleteCurrency();\n        }}>Delete</button\n      >\n    {/if}\n  </div>\n  <div style=\"display: flex; margin-bottom: 16px;\">\n    <p style=\"margin-right: 16px;\">Select Currency</p>\n    <select\n      disabled={$CurrencyStore.selected_currencies.length ===\n        $CurrencyStore.currency_rates.length}\n      class=\"add-remove-currency select-currency\"\n      bind:value={selectedCurrency}\n      name=\"select-currency\"\n      id=\"select-currency\"\n    >\n      {#each $CurrencyStore.currency_rates as currencyRate, i (currencyRate.uid)}\n        {#if !$CurrencyStore.selected_currencies.includes(currencyRate.name)}\n          <option value={currencyRate.currencyCode}\n            >{currencyRate.currencyCode}</option\n          >\n        {/if}\n      {/each}\n    </select>\n    <button\n      disabled={selectedCurrency.length === 0}\n      on:click={handleSelectCurrency(selectedCurrency)}>Select</button\n    >\n    <button\n      on:click={() => {\n        handleResetCurrencies();\n      }}>Reset</button\n    >\n  </div>\n  <div\n    style=\"display: grid; \n        grid-template-columns: repeat(6, auto);\n        max-width: 480px;\n        \"\n  >\n    <div class=\"table-cell heading-title\">Row</div>\n    <div class=\"table-cell heading-title\">Manual</div>\n    <div class=\"table-cell heading-title\">Code</div>\n    <div class=\"table-cell heading-title\">Name</div>\n    <div class=\"table-cell heading-title\">Rate</div>\n    <div class=\"table-cell heading-title\">Adjustment</div>\n    {#each selectedCurrencies as currencyRate, i (currencyRate.uid)}\n      <div class=\"table-cell\">\n        <p>{i + 1}</p>\n      </div>\n\n      <div class=\"table-cell\">\n        <input type=\"checkbox\" bind:checked={currencyRate.has_manual_rate} />\n      </div>\n      <div class=\"table-cell\">\n        <p>\n          {currencyRate.currencyCode}\n        </p>\n      </div>\n      <div class=\"table-cell\">\n        <p>\n          {currencyRate.alias_name}\n        </p>\n      </div>\n      <div class=\"table-cell\">\n        {#if currencyRate.has_manual_rate}\n          <input\n            on:change={handleChangingAdjustment}\n            type=\"number\"\n            min=\"0\"\n            step=\"0.0001\"\n            bind:value={currencyRate.manual_rate}\n          />\n        {:else}\n          <p>\n            {currencyRate.rate}\n          </p>\n        {/if}\n      </div>\n      <div class=\"table-cell\">\n        <input\n          on:change={handleChangingAdjustment}\n          type=\"number\"\n          step=\"50\"\n          bind:value={currencyRate.adjustment}\n        />\n      </div>\n    {/each}\n  </div>\n</Card>\n\n<style>\n  * {\n    font-size: 16px;\n  }\n\n  .add-remove-currency {\n    margin-right: 8px;\n    width: 64px;\n  }\n\n  .table-cell {\n    width: 56px;\n    margin: 8px 0px;\n  }\n\n  .heading-title {\n    text-align: start;\n    font-size: smaller;\n  }\n\n  input[type=\"number\"] {\n    width: 72px;\n    border-width: 1px;\n    border-radius: 4px;\n    text-align: center;\n    padding: 2px 4px;\n    /* flex-grow: 2; */\n    /* border: none; */\n    font-size: 16px;\n    text-align: start;\n  }\n\n  input:focus {\n    outline: none;\n  }\n\n  button {\n    margin-right: 8px;\n    font-size: 14px;\n    color: #fff;\n    border: 0;\n    border-radius: 8px;\n    color: #fff;\n    height: 32px;\n    width: 60px;\n    cursor: pointer;\n    background-color: #202142;\n  }\n\n  button:hover {\n    transform: scale(0.98);\n    opacity: 0.9;\n  }\n\n  button:disabled {\n    background-color: #cccccc;\n    color: #333;\n    cursor: auto;\n  }\n\n  button:disabled:hover {\n    transform: scale(1);\n    opacity: 1;\n  }\n</style>\n","<script>\n  import BotPanel from \"./components/BotPanel.svelte\";\n  import DollarPanel from \"./components/DollarPanel.svelte\";\n\n  import SymbolList from \"./components/SymbolList.svelte\";\n  import {\n    reloadRatesFromServer,\n    reloadStateFromServer,\n    sendStateToServer,\n    startUpdatingAppState,\n    stopUpdatingAppState,\n  } from \"./stores\";\n\n  import { onMount } from \"svelte\";\n\n\n  let update_interval_ms = 60000;\n\n  onMount(async () => {\n    console.log(\"Loaded!\");\n      startUpdatingAppState();\n\n    const interval = setInterval(reloadRatesFromServer, update_interval_ms);\n    await reloadStateFromServer();\n    return () => {\n      stopUpdatingAppState();\n      clearInterval(interval);\n    };\n  });\n</script>\n\n<main class=\"container\">\n  <div style=\"display: flex; justify-content:space-between;\">\n    <p>Exchange Admin Panel</p>\n    <div style=\"display: flex;\">\n    </div>\n  </div>\n  <SymbolList />\n  <DollarPanel />\n  <BotPanel />\n</main>\n\n<style>\n  p {\n    font-size: 24px;\n  }\n</style>\n","import App from './App.svelte'\n\nconst app = new App({\n  target: document.body,\n})\n\nexport default app\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","to_number","set_data","wholeText","set_input_value","input","set_style","key","important","style","setProperty","select_option","select","option","__value","selected","selectedIndex","select_value","selected_option","querySelector","current_component","set_current_component","onMount","Error","get_current_component","on_mount","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","update","pop","has","add","clear","fragment","before_update","after_update","outroing","transition_in","block","local","delete","transition_out","o","outros","c","d","destroy_block","lookup","update_keyed_each","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","n","old_indexes","new_blocks","new_lookup","Map","deltas","child_ctx","get","set","abs","will_move","did_move","m","first","new_block","old_block","new_key","old_key","create_component","mount_component","customElement","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","subscriber","invalidate","size","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","byteToHex","toString","randomUUID","v4","buf","offset","native","rnds","random","arr","toLowerCase","unsafeStringify","AppState","dollar_model","currency_model","bot_model","constructor","CurrencyRate","uid","currencyCode","alias_name","rate","has_manual_rate","manual_rate","adjustment","CurrencyModel","selected_currencies","currency_rates","DollarPrice","price","timestamp","DollarModel","current_price","historic_prices","BotInterval","unit","BotModel","disabled","onTime","onChange","interval","CurrencyStore","DollarStore","BotStore","dollarUnsub","currencyUnsub","botUnsub","app_state","async","_getAppStateFromServer","console","log","raw_state","raw_res","fetch","ok","statusText","status","json","getRawStateFromServer","new_dollar_model","rec_historic_prices","historic_price","sort","dollarModelDataAdapter","new_bot_model","botModelDataAdapter","new_currency_model","received_currency_rates","raw_model","localeCompare","currencyModelDataAdapter","reloadRatesFromServer","new_currency_rates","currentState","toBeUpdatedState","JSON","parse","stringify","currency_rate","e","includes","corrospondingRate","find","sendStateToServer","app_state_json","method","headers","body","$BotStore","currentTarget","new_state","preventDefault","call","user_selected_timedate","new_price","new_historic_prices","String","floor","Date","toLocaleDateString","toLocaleTimeString","updated_current_currencies","onNewFieldChangeHandler","newOrEditCurrency","v","addingNewCurrency","handleDeleteCurrency","newState","newCurrencyRates","item","resetNewOrEditCurrency","handleAddOrEditCurrency","current_currency_rates","findIndex","handleResetCurrencies","m_SelectedCurrencies","selectedCurrency","possibleSelected","selectedCurrencies","updateSelectedCurrencies","selectedCurrencyName","setInterval","new_app_state","reloadStateFromServer","clearInterval"],"mappings":"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"}